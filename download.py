import os
import pandas as pd
import subprocess
import time
import random
from mutagen.easyid3 import EasyID3
from mutagen.id3 import ID3NoHeaderError

BASE_OUTPUT_DIR = "downloads"

def sanitize_filename(s: str) -> str:
    """–£–±–∏—Ä–∞–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    return "".join(c for c in s if c not in '\\/:*?"<>|').strip()

def add_metadata(filepath: str, title: str, artist: str, album: str = "", genre: str = "", year: str = ""):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ MP3 —Ñ–∞–π–ª—É
    """
    try:
        try:
            audio = EasyID3(filepath)
        except ID3NoHeaderError:
            # –°–æ–∑–¥–∞—ë–º ID3 —Ç–µ–≥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            audio = EasyID3()
            audio.save(filepath)
            audio = EasyID3(filepath)

        if title:
            audio['title'] = title
        if artist:
            audio['artist'] = artist
        if album:
            audio['album'] = album
        if genre:
            audio['genre'] = genre
        if year:
            audio['date'] = year

        audio.save()
        print(f"   üìù –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")

def download_track(title: str, artist: str, output_path: str, album: str = "", genre: str = "", year: str = ""):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫ —Å YouTube (–ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞) –≤ mp3
    """
    query = f"{title} {artist} audio"
    filename = sanitize_filename(f"{artist} - {title}.mp3")
    filepath = os.path.join(output_path, filename)

    # –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if os.path.exists(filepath):
        print(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –µ—Å—Ç—å): {filename}")
        return

    try:
        cmd = [
            "yt-dlp",
            f"ytsearch1:{query}",   # –ø–æ–∏—Å–∫ –∏ –≤–∑—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            "-x",                  # –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ
            "--audio-format", "mp3",
            "-o", filepath,
            "--quiet",             # –º–µ–Ω—å—à–µ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
            "--no-warnings",
        ]
        subprocess.run(cmd, check=True)
        print(f"‚úÖ {filename}")

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        add_metadata(filepath, title, artist, album, genre, year)
    except subprocess.CalledProcessError:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {query}")

def main():
    # –∏—â–µ–º –≤—Å–µ csv –≤ –ø–∞–ø–∫–µ
    csv_files = [f for f in os.listdir(".") if f.lower().endswith(".csv")]
    if not csv_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ .csv —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ.")
        return

    print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ CSV —Ñ–∞–π–ª—ã:")
    for i, f in enumerate(csv_files, start=1):
        print(f"{i}. {f}")

    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ")
    try:
        idx = int(choice) - 1
        if idx < 0 or idx >= len(csv_files):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return
    except ValueError:
        print("‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ")
        return

    input_file = csv_files[idx]
    playlist_name = os.path.splitext(os.path.basename(input_file))[0]
    output_dir = os.path.join(BASE_OUTPUT_DIR, playlist_name)
    os.makedirs(output_dir, exist_ok=True)

    print(f"üìÇ –†–∞–±–æ—Ç–∞–µ–º —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º: {playlist_name}")

    # —á–∏—Ç–∞–µ–º CSV
    df = pd.read_csv(input_file, sep=";", encoding="utf-8-sig")

    for _, row in df.iterrows():
        title = str(row.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "")).strip()
        artist = str(row.get("–ê—Ä—Ç–∏—Å—Ç", "")).strip()
        album = str(row.get("–ê–ª—å–±–æ–º", "")).strip() if "–ê–ª—å–±–æ–º" in row and pd.notna(row.get("–ê–ª—å–±–æ–º")) else ""
        genre = str(row.get("–ñ–∞–Ω—Ä", "")).strip() if "–ñ–∞–Ω—Ä" in row and pd.notna(row.get("–ñ–∞–Ω—Ä")) else ""
        year = str(row.get("–ì–æ–¥", "")).strip() if "–ì–æ–¥" in row and pd.notna(row.get("–ì–æ–¥")) else ""
        if not title:
            continue

        download_track(title, artist, output_dir, album, genre, year)

        # –∑–∞–¥–µ—Ä–∂–∫–∞ 5-10 —Å–µ–∫—É–Ω–¥
        delay = random.randint(5, 10)
        print(f"‚è≥ –ñ–¥—ë–º {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç—Ä–µ–∫–æ–º...")
        time.sleep(delay)

if __name__ == "__main__":
    main()

